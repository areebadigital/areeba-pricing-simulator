import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card } from "./ui/card";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Checkbox } from "./ui/checkbox";
import { NumberInput } from "./NumberInput";
export function ClientConfigBar({ config, onConfigChange }) {
    const updateConfig = (field, value) => {
        onConfigChange({
            ...config,
            [field]: value
        });
    };
    return (_jsxs("div", { className: "space-y-4 mb-4", children: [_jsxs(Card, { className: "p-4", children: [_jsx("h3", { className: "text-sm font-medium mb-3", children: "Project Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "clientName", className: "text-sm", children: "Client Name" }), _jsx(Input, { id: "clientName", value: config.clientName, onChange: (e) => updateConfig('clientName', e.target.value), placeholder: "Enter client name", className: `h-8 ${config.clientName ? 'bg-white border-border-filled shadow-sm' : ''}` }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Name of the client organization" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "projectName", className: "text-sm", children: "Project Name" }), _jsx(Input, { id: "projectName", value: config.projectName, onChange: (e) => updateConfig('projectName', e.target.value), placeholder: "Enter project name", className: `h-8 ${config.projectName ? 'bg-white border-border-filled shadow-sm' : ''}` }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Internal project identifier" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "preparedBy", className: "text-sm", children: "Prepared By" }), _jsx(Input, { id: "preparedBy", value: config.preparedBy, onChange: (e) => updateConfig('preparedBy', e.target.value), placeholder: "Enter your name", className: `h-8 ${config.preparedBy ? 'bg-white border-border-filled shadow-sm' : ''}` }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Person preparing this quote" })] })] })] }), _jsxs(Card, { className: "p-4", children: [_jsx("h3", { className: "text-sm font-medium mb-3", children: "Card Configuration" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "hasDebitCards", checked: config.hasDebitCards, onCheckedChange: (checked) => updateConfig('hasDebitCards', checked) }), _jsx(Label, { htmlFor: "hasDebitCards", className: "text-sm", children: "Debit/Prepaid/Virtual Cards" })] }), config.hasDebitCards && (_jsxs("div", { children: [_jsx(Label, { htmlFor: "debitCards", className: "text-xs", children: "Number of Debit/Prepaid/Virtual Cards" }), _jsx(NumberInput, { id: "debitCards", value: config.debitCards, onChange: (value) => updateConfig('debitCards', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Total debit, prepaid, and virtual cards to be issued" })] }))] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "hasCreditCards", checked: config.hasCreditCards, onCheckedChange: (checked) => updateConfig('hasCreditCards', checked) }), _jsx(Label, { htmlFor: "hasCreditCards", className: "text-sm", children: "Credit Cards" })] }), config.hasCreditCards && (_jsxs("div", { children: [_jsx(Label, { htmlFor: "creditCards", className: "text-xs", children: "Number of Credit Cards" }), _jsx(NumberInput, { id: "creditCards", value: config.creditCards, onChange: (value) => updateConfig('creditCards', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Total credit cards to be issued" })] }))] })] }), (config.hasDebitCards || config.hasCreditCards) && (_jsxs("div", { className: "pt-2 border-t border-border", children: [_jsx("h4", { className: "text-xs font-medium text-muted-foreground mb-2", children: "Card Delivery" }), _jsxs("div", { className: "max-w-xs", children: [_jsx(Label, { htmlFor: "monthlyDeliveries", className: "text-xs", children: "Monthly Card Deliveries" }), _jsx(NumberInput, { id: "monthlyDeliveries", value: config.monthlyDeliveries, onChange: (value) => updateConfig('monthlyDeliveries', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly card deliveries to cardholders" })] })] }))] })] }), _jsxs(Card, { className: "p-4", children: [_jsx("h3", { className: "text-sm font-medium mb-3", children: "Monthly Transaction & Communication Volumes" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-xs font-medium text-muted-foreground mb-2", children: "Transaction Processing" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "monthlyAuthorizations", className: "text-xs", children: "Authorizations" }), _jsx(NumberInput, { id: "monthlyAuthorizations", value: config.monthlyAuthorizations, onChange: (value) => updateConfig('monthlyAuthorizations', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly authorization transactions" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "monthlySettlements", className: "text-xs", children: "Settlements" }), _jsx(NumberInput, { id: "monthlySettlements", value: config.monthlySettlements, onChange: (value) => updateConfig('monthlySettlements', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly settlement transactions" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "monthly3DS", className: "text-xs", children: "3D Secure" }), _jsx(NumberInput, { id: "monthly3DS", value: config.monthly3DS, onChange: (value) => updateConfig('monthly3DS', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly 3DS authentications" })] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-xs font-medium text-muted-foreground mb-2", children: "Communication Services" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-3", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "monthlySMS", className: "text-xs", children: "SMS Alerts" }), _jsx(NumberInput, { id: "monthlySMS", value: config.monthlySMS, onChange: (value) => updateConfig('monthlySMS', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly SMS notifications sent" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "monthlyNotifications", className: "text-xs", children: "Push Notifications" }), _jsx(NumberInput, { id: "monthlyNotifications", value: config.monthlyNotifications, onChange: (value) => updateConfig('monthlyNotifications', value), placeholder: "0", className: "h-8" }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Monthly push notifications sent" })] })] })] })] })] })] }));
}
