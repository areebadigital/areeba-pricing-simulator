import { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Avatar, AvatarFallback } from './ui/avatar';
import { ArrowLeft, LogOut, Settings, Package, Tags, History, CreditCard, Calculator, Zap, Users, Plus, ChevronLeft, ChevronRight, Edit, Copy, RefreshCw, Download, User, UserCheck, ChevronDown, ChevronRight as ChevronRightIcon, BarChart3, FileText, Building } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Separator } from './ui/separator';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { PricingItem, Category, ScenarioSummary, ClientConfig, ConfigurationDefinition, SelectedItem } from '../types/pricing';
import { SimpleServiceManager } from './SimpleServiceManager';
import { ScenarioHistoryTab } from './ScenarioHistoryTab';
import { ConfigurationDialog } from './dialogs/ConfigurationDialog';
import { ScenarioDialog } from './dialogs/ScenarioDialog';
import { GuestSubmissionDetailDialog } from './dialogs/GuestSubmissionDetailDialog';
import { DataTable } from './DataTable';
import { CategoryManager } from './CategoryManager';
import { TagManager } from './TagManager';
import { UserManagement } from './UserManagement';
import { SimulatorManager } from './SimulatorManager';
import { ThemeToggle } from './ThemeToggle';
import { formatPrice } from '../utils/formatters';
import { downloadPDF } from '../utils/pdfHelpers';

import { api } from '../utils/api';
import { getAvatarProps } from '../utils/avatarColors';
import { ROUTES } from '../config/routes';
import { SimulatorApi } from '../utils/simulatorApi';
import { Simulator } from '../types/simulator';
import WordMarkRed from '../imports/WordMarkRed';

interface AdminInterfaceProps {
  onClose: () => void;
  items: PricingItem[];
  categories: Category[];
  selectedItems?: SelectedItem[];
  clientConfig?: ClientConfig;
  onUpdateItems: (items: PricingItem[]) => void;
  onUpdateCategories: (categories: Category[], skipSave?: boolean) => void;
  onLogout?: () => void;
  onForceRefresh?: () => void;
  adminToken?: string | null;
  currentUserId: string;
  currentUserRole: string;
}


export function AdminInterface({ 
  onClose, 
  items, 
  categories, 
  selectedItems, 
  clientConfig, 
  onUpdateItems, 
  onUpdateCategories, 
  onLogout, 
  onForceRefresh,
  adminToken,
  currentUserId,
  currentUserRole
}: AdminInterfaceProps) {
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get current simulator and tab from URL
  const getCurrentSimulatorAndTab = () => {
    const path = location.pathname;
    
    // Check if we're in a simulator-specific route
    const simulatorMatch = path.match(/^\/admin\/([^\/]+)\/(.+)$/);
    if (simulatorMatch) {
      const [, simulator, section] = simulatorMatch;
      return { simulator, section };
    }
    
    // Check global routes
    if (path.includes('/simulators')) return { simulator: null, section: 'simulators' };
    if (path.includes('/history')) return { simulator: null, section: 'history' };
    if (path.includes('/guest-submissions')) return { simulator: null, section: 'guest-submissions' };
    if (path.includes('/users')) return { simulator: null, section: 'users' };
    
    // Legacy routes
    if (path.includes('/configuration')) return { simulator: null, section: 'configurations' };
    if (path.includes('/categories')) return { simulator: null, section: 'categories' };
    if (path.includes('/services')) return { simulator: null, section: 'services' };
    if (path.includes('/tags')) return { simulator: null, section: 'tags' };
    if (path.includes('/scenarios')) return { simulator: null, section: 'scenarios' };
    
    return { simulator: null, section: 'simulators' };
  };
  
  const { simulator: currentSimulator, section: currentSection } = getCurrentSimulatorAndTab();
  


  const [configurations, setConfigurations] = useState<any[]>([]);
  const [showConfigDialog, setShowConfigDialog] = useState(false);
  const [editingConfig, setEditingConfig] = useState<any>(null);
  const [scenarios, setScenarios] = useState<any[]>([]);
  const [scenariosLoading, setScenariosLoading] = useState(false);
  const [selectedScenario, setSelectedScenario] = useState<ScenarioSummary | null>(null);
  const [showScenarioDialog, setShowScenarioDialog] = useState(false);
  const [guestSubmissions, setGuestSubmissions] = useState<any[]>([]);
  const [guestSubmissionsLoading, setGuestSubmissionsLoading] = useState(false);
  const [selectedGuestSubmission, setSelectedGuestSubmission] = useState<any | null>(null);
  const [showGuestSubmissionDialog, setShowGuestSubmissionDialog] = useState(false);
  const [simulators, setSimulators] = useState<Simulator[]>([]);
  const [simulatorsLoading, setSimulatorsLoading] = useState(false);
  const [expandedSimulators, setExpandedSimulators] = useState<Set<string>>(new Set());
  


  // Load configurations and simulators on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        const [loadedConfigs, loadedSimulators] = await Promise.all([
          api.loadConfigurations(),
          SimulatorApi.loadSimulators()
        ]);
        setConfigurations(loadedConfigs);
        setSimulators(loadedSimulators);
      } catch (error) {
        console.error('Failed to load data:', error);
      }
    };
    
    loadData();
  }, []);

  const loadScenarios = async () => {
    setScenariosLoading(true);
    try {
      const loadedScenarios = await api.loadScenarios();
      setScenarios(loadedScenarios);
    } catch (error) {
      console.error('Failed to load scenarios:', error);
      setScenarios([]);
    } finally {
      setScenariosLoading(false);
    }
  };

  const loadGuestSubmissions = async () => {
    setGuestSubmissionsLoading(true);
    try {
      const loadedSubmissions = await api.loadGuestSubmissions();
      setGuestSubmissions(loadedSubmissions);
    } catch (error) {
      console.error('Failed to load guest submissions:', error);
      setGuestSubmissions([]);
    } finally {
      setGuestSubmissionsLoading(false);
    }
  };

  // Load scenarios when the scenarios tab is activated
  useEffect(() => {
    if (currentSection === 'scenarios') {
      loadScenarios();
    }
  }, [currentSection]);

  // Load guest submissions when the guest-submissions tab is activated
  useEffect(() => {
    if (currentSection === 'guest-submissions') {
      loadGuestSubmissions();
    }
  }, [currentSection]);

  const handleClose = () => {
    onClose();
  };

  const toggleSimulatorDropdown = (simulatorId: string) => {
    setExpandedSimulators(prev => {
      const newSet = new Set(prev);
      if (newSet.has(simulatorId)) {
        newSet.delete(simulatorId);
      } else {
        newSet.add(simulatorId);
      }
      return newSet;
    });
  };

  const getSimulatorRoute = (simulatorId: string, section: string) => {
    return `/admin/${simulatorId}/${section}`;
  };

  const getGlobalRoute = (section: string) => {
    switch (section) {
      case 'simulators': return ROUTES.ADMIN_SIMULATORS;
      case 'history': return ROUTES.ADMIN_HISTORY;
      case 'guest-submissions': return ROUTES.ADMIN_GUEST_SUBMISSIONS;
      case 'users': return ROUTES.ADMIN_USERS;
      default: return ROUTES.ADMIN_SIMULATORS;
    }
  };

  const handleSaveConfiguration = async (config: any) => {
    try {
      await api.saveConfiguration(config);
      const updatedConfigs = await api.loadConfigurations();
      setConfigurations(updatedConfigs);
      setShowConfigDialog(false);
      setEditingConfig(null);
      if (onForceRefresh) {
        onForceRefresh();
      }
    } catch (error) {
      console.error('Failed to save configuration:', error);
      throw error;
    }
  };

  const handleDeleteConfiguration = async (config: any) => {
    try {
      await api.deleteConfiguration(config.id);
      const updatedConfigs = await api.loadConfigurations();
      setConfigurations(updatedConfigs);
      setShowConfigDialog(false);
      setEditingConfig(null);
    } catch (error) {
      console.error('Failed to delete configuration:', error);
      throw error;
    }
  };

  const handleDuplicateConfiguration = async (config: any) => {
    try {
      const duplicatedConfig = {
        ...config,
        id: `${config.id}-copy-${Date.now()}`,
        name: `${config.name} (Copy)`,
        isActive: false
      };
      await api.saveConfiguration(duplicatedConfig);
      const updatedConfigs = await api.loadConfigurations();
      setConfigurations(updatedConfigs);
    } catch (error) {
      console.error('Failed to duplicate configuration:', error);
      throw error;
    }
  };

  const handleReorderConfigurations = async (reorderedConfigs: any[]) => {
    setConfigurations(reorderedConfigs);
    // You could optionally save the new order to the backend here
  };

  const handleDuplicateScenario = async (scenario: any) => {
    const confirmed = window.confirm(
      `Duplicate scenario for "${scenario.clientName}" - "${scenario.projectName}"?\n\nThis will create a copy with a new timestamp.`
    );
    
    if (!confirmed) return;

    try {
      // Load the full scenario data
      const scenarioData = await api.getScenarioData(scenario.scenarioId);
      if (!scenarioData) {
        alert('Scenario data not found. Cannot duplicate.');
        return;
      }

      // Create a new scenario with updated metadata
      const duplicatedScenarioData = {
        ...scenarioData,
        config: {
          ...scenarioData.config,
          projectName: `${scenarioData.config.projectName} (Copy)`
        }
      };

      // Save the duplicated scenario
      await api.saveScenarioData(duplicatedScenarioData);
      
      // Reload scenarios
      await loadScenarios();
      
      alert('Scenario duplicated successfully!');
    } catch (error) {
      console.error('Failed to duplicate scenario:', error);
      alert('Failed to duplicate scenario. Please try again.');
    }
  };

  return (
    <div className="h-screen bg-background flex overflow-hidden">
      {/* Sidebar */}
      <div className="w-64 h-full bg-sidebar border-r border-sidebar-border flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-sidebar-border">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-20 h-5 flex-shrink-0">
              <WordMarkRed />
            </div>
            <div className="text-sidebar-foreground">
              <div className="text-sm font-medium">Admin Panel</div>
            </div>
          </div>
          
          {/* Back to Simulators - at the top under logo */}
          <Button
            onClick={handleClose}
            variant="ghost"
            size="sm"
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground mb-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Simulators
          </Button>
          
        </div>

        {/* Navigation */}
        <div className="flex-1 p-4 space-y-4">
          {/* Simulators Section */}
          <div className="space-y-2">
            <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider">
              Simulators
            </h3>
            
            {/* Simulator Dropdowns */}
            {simulators.map((simulator) => {
              const isExpanded = expandedSimulators.has(simulator.id);
              const isCurrentSimulator = currentSimulator === simulator.id;
              
              return (
                <div key={simulator.id} className="space-y-1">
                  {/* Simulator Header */}
                  <button
                    onClick={() => toggleSimulatorDropdown(simulator.id)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-sm rounded-md transition-colors ${
                      isCurrentSimulator
                        ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                        : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <CreditCard className="h-4 w-4" />
                      <span>{simulator.title}</span>
                    </div>
                    {isExpanded ? (
                      <ChevronDown className="h-4 w-4" />
                    ) : (
                      <ChevronRightIcon className="h-4 w-4" />
                    )}
                  </button>
                  
                  {/* Simulator Sub-items */}
                  {isExpanded && (
                    <div className="ml-4 space-y-1">
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'dashboard'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'dashboard' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <BarChart3 className="h-4 w-4" />
                        <span>Dashboard</span>
                      </button>
                      
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'info'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'info' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <FileText className="h-4 w-4" />
                        <span>Info</span>
                      </button>
                      
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'client-fields'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'client-fields' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <Settings className="h-4 w-4" />
                        <span>Client Fields</span>
                      </button>
                      
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'categories'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'categories' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <Package className="h-4 w-4" />
                        <span>Categories</span>
                      </button>
                      
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'services'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'services' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <Package className="h-4 w-4" />
                        <span>Services</span>
                      </button>
                      
                      <button
                        onClick={() => navigate(getSimulatorRoute(simulator.id, 'tags'))}
                        className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                          currentSection === 'tags' && isCurrentSimulator
                            ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                            : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
                        }`}
                      >
                        <Tags className="h-4 w-4" />
                        <span>Tags</span>
                      </button>
                    </div>
                  )}
                </div>
              );
            })}
            
            {/* Add New Simulator Button */}
            <button
              onClick={() => navigate(ROUTES.ADMIN_SIMULATORS)}
              className="w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground border border-dashed border-sidebar-border"
            >
              <Plus className="h-4 w-4" />
              <span>Add new simulator</span>
            </button>
          </div>
          
          <Separator className="my-4" />
          
          {/* Global Sections */}
          <div className="space-y-2">
            <h3 className="text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wider">
              Global
            </h3>
            
            <button
              onClick={() => navigate(getGlobalRoute('history'))}
              className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                currentSection === 'scenarios' && !currentSimulator
                  ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                  : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
              }`}
            >
              <History className="h-4 w-4" />
              <span>History</span>
            </button>
            
            <button
              onClick={() => navigate(getGlobalRoute('guest-submissions'))}
              className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                currentSection === 'guest-submissions' && !currentSimulator
                  ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                  : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
              }`}
            >
              <UserCheck className="h-4 w-4" />
              <span>Guest Simulators</span>
            </button>
            
            <button
              onClick={() => navigate('/admin/pdf-builder')}
              className="w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground"
            >
              <FileText className="h-4 w-4" />
              <span>PDF Builder</span>
            </button>
            
            <button
              onClick={() => navigate(getGlobalRoute('users'))}
              className={`w-full flex items-center gap-3 px-3 py-2 text-sm rounded-md transition-colors ${
                currentSection === 'users' && !currentSimulator
                  ? 'bg-sidebar-accent text-sidebar-accent-foreground'
                  : 'text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground'
              }`}
            >
              <Users className="h-4 w-4" />
              <span>Users</span>
            </button>
          </div>
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-sidebar-border">
          {/* User Profile Section */}
          <div className="mb-3 p-3 bg-muted/50 rounded-lg">
            <div className="flex items-center gap-3">
              {(() => {
                const userData = JSON.parse(localStorage.getItem('user') || '{}');
                const displayName = userData.first_name || userData.last_name
                  ? `${userData.first_name || ''} ${userData.last_name || ''}`.trim()
                  : userData.email || 'User';
                const avatarProps = getAvatarProps(displayName);
                
                return (
                  <Avatar className="h-10 w-10 flex-shrink-0">
                    <AvatarFallback className={`text-sm font-medium ${avatarProps.bgClass} ${avatarProps.textClass}`}>
                      {avatarProps.initials}
                    </AvatarFallback>
                  </Avatar>
                );
              })()}
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium truncate">
                  {(() => {
                    const userData = JSON.parse(localStorage.getItem('user') || '{}');
                    const displayName = userData.first_name || userData.last_name
                      ? `${userData.first_name || ''} ${userData.last_name || ''}`.trim()
                      : userData.email || 'User';
                    return displayName;
                  })()}
                </p>
                <p className="text-xs text-muted-foreground truncate">
                  {(() => {
                    const userData = JSON.parse(localStorage.getItem('user') || '{}');
                    return userData.email || '';
                  })()}
                </p>
                <div className="flex items-center gap-1 mt-1">
                  <Badge 
                    variant="outline"
                    className={`text-xs ${
                      (() => {
                        const userData = JSON.parse(localStorage.getItem('user') || '{}');
                        const role = userData.role;
                        if (role === 'owner') {
                          return 'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200 dark:bg-purple-900/20 dark:text-purple-300 dark:border-purple-800 dark:hover:bg-purple-900/30';
                        } else if (role === 'admin') {
                          return 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200 dark:bg-blue-900/20 dark:text-blue-300 dark:border-blue-800 dark:hover:bg-blue-900/30';
                        } else if (role === 'member') {
                          return 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200 dark:bg-green-900/20 dark:text-green-300 dark:border-green-800 dark:hover:bg-green-900/30';
                        }
                        return '';
                      })()
                    }`}
                  >
                    {(() => {
                      const userData = JSON.parse(localStorage.getItem('user') || '{}');
                      const role = userData.role || 'user';
                      return role.charAt(0).toUpperCase() + role.slice(1);
                    })()}
                  </Badge>
                </div>
              </div>
            </div>
          </div>
          
          {/* Theme Toggle */}
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs text-muted-foreground">Theme</span>
            <ThemeToggle />
          </div>
          
          {/* Sign Out button - in footer */}
          {onLogout && (
            <Button
              onClick={onLogout}
              variant="ghost"
              size="sm"
              className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
            >
              <LogOut className="h-4 w-4 mr-2" />
              Sign Out
            </Button>
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 h-full overflow-auto">
        <div className="p-6">
          {/* Content Header */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <h1 className="text-2xl font-medium">
                  {currentSimulator ? 
                    `${simulators.find(s => s.id === currentSimulator)?.title || 'Simulator'} - ${currentSection?.charAt(0).toUpperCase() + currentSection?.slice(1).replace('-', ' ') || ''}` :
                    currentSection === 'simulators' ? 'Simulators' :
                    currentSection === 'users' ? 'Users' :
                    currentSection === 'scenarios' ? 'History' :
                    currentSection === 'guest-submissions' ? 'Guest Submissions' :
                    'Admin Panel'
                  }
                </h1>
              </div>
            </div>
            <p className="text-muted-foreground">
              {currentSimulator && currentSection === 'dashboard' && 'Monitor simulator activity and performance metrics'}
              {currentSimulator && currentSection === 'info' && 'Manage simulator details, description, and display settings'}
              {currentSimulator && currentSection === 'client-fields' && 'Create form fields for client information and project details'}
              {currentSimulator && currentSection === 'categories' && 'Organize pricing services into logical categories for better organization'}
              {currentSimulator && currentSection === 'services' && 'Create and manage pricing services with auto-add and quantity mapping features'}
              {currentSimulator && currentSection === 'tags' && 'Manage tags for better service organization and filtering'}
              {!currentSimulator && currentSection === 'simulators' && 'Manage pricing simulators, their visibility, and display order'}
              {!currentSimulator && currentSection === 'users' && 'Manage system users, roles, and access permissions for the pricing simulator'}
              {!currentSimulator && currentSection === 'scenarios' && 'View saved pricing scenarios from PDF downloads and client sessions'}
              {!currentSimulator && currentSection === 'guest-submissions' && 'View and manage guest user submissions from the pricing simulator'}
            </p>
          </div>

          {/* Content */}
          <div>
            {/* Simulator-specific sections */}
            {currentSimulator && currentSection === 'dashboard' && (
              <div className="text-center py-12">
                <BarChart3 className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Dashboard Coming Soon</h3>
                <p className="text-muted-foreground">Monitor simulator activity and performance metrics</p>
              </div>
            )}
            
            {currentSimulator && currentSection === 'info' && (
              <div className="text-center py-12">
                <FileText className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Info Page Coming Soon</h3>
                <p className="text-muted-foreground">Manage simulator details, description, and display settings</p>
              </div>
            )}
            
            {currentSimulator && currentSection === 'client-fields' && (
              <>
                <DataTable
                  title="Client Fields"
                  description="Create and manage form fields for client information and project details"
                  headers={['Name', 'Status', 'Description', 'Fields', 'Actions']}
                  items={configurations}
                  getItemKey={(config) => config.id}
                  renderRow={(config: any) => (
                    <>
                      <TableCell className="font-medium">{config.name}</TableCell>
                      <TableCell>
                        <Badge variant={config.isActive ? 'default' : 'secondary'}>
                          {config.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </TableCell>
                      <TableCell className="text-muted-foreground">{config.description}</TableCell>
                      <TableCell className="text-muted-foreground">
                        {config.fields ? config.fields.length : 0} fields
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setEditingConfig(config);
                              setShowConfigDialog(true);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDuplicateConfiguration(config)}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </>
                  )}
                  actionButton={
                    <Button onClick={() => setShowConfigDialog(true)}>
                      <Plus className="h-4 w-4 mr-2" />
                      Create Client Fields
                    </Button>
                  }
                  onReorder={handleReorderConfigurations}
                />
                
                {showConfigDialog && (
                  <ConfigurationDialog
                    isOpen={showConfigDialog}
                    onClose={() => {
                      setShowConfigDialog(false);
                      setEditingConfig(null);
                    }}
                    onSave={handleSaveConfiguration}
                    onDelete={handleDeleteConfiguration}
                    configuration={editingConfig}
                    configurations={configurations}
                    isCreating={!editingConfig}
                  />
                )}
              </>
            )}
            
            {currentSimulator && currentSection === 'categories' && (
              <CategoryManager
                categories={categories}
                services={items}
                onUpdateCategories={onUpdateCategories}
              />
            )}
            
            {currentSimulator && currentSection === 'services' && (
              <SimpleServiceManager
                services={items}
                categories={categories}
                onUpdateServices={onUpdateItems}
              />
            )}
            
            {currentSimulator && currentSection === 'tags' && (
              <TagManager
                services={items}
                onUpdateServices={onUpdateItems}
              />
            )}
            
            {/* Global sections */}
            {!currentSimulator && currentSection === 'simulators' && (
              <SimulatorManager />
            )}
            
            {!currentSimulator && currentSection === 'users' && (
              <UserManagement
                currentUserId={currentUserId}
                currentUserRole={currentUserRole}
              />
            )}
            
            {!currentSimulator && currentSection === 'scenarios' && (
              <>
                <DataTable
                  title="Scenario History"
                  description="View and manage saved pricing scenarios from client sessions"
                  headers={['Submission Code', 'Client & Project', 'Prepared By', 'Date Created', 'Items', 'One-time Cost', 'Monthly Cost', 'Discount', 'Total Project Cost', 'Actions']}
                  items={scenarios}
                  isLoading={scenariosLoading}
                  getItemKey={(scenario) => scenario.scenarioId}
                  renderRow={(scenario: any) => (
                    <>
                      <TableCell className="font-medium">{scenario.scenarioId}</TableCell>
                      <TableCell>
                        <div>
                          <div className="font-medium">{scenario.clientName}</div>
                          <div className="text-sm text-muted-foreground">{scenario.projectName}</div>
                        </div>
                      </TableCell>
                      <TableCell>{scenario.preparedBy}</TableCell>
                      <TableCell>{new Date(scenario.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>{scenario.selectedItems?.length || 0}</TableCell>
                      <TableCell>{formatPrice(scenario.summary?.oneTimeCost || 0)}</TableCell>
                      <TableCell>{formatPrice(scenario.summary?.monthlyCost || 0)}</TableCell>
                      <TableCell>
                        {scenario.summary?.globalDiscount > 0 ? `${scenario.summary.globalDiscount}%` : 'None'}
                      </TableCell>
                      <TableCell className="font-medium">
                        {formatPrice(scenario.summary?.totalProjectCost || 0)}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setSelectedScenario(scenario);
                              setShowScenarioDialog(true);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDuplicateScenario(scenario)}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => downloadPDF(scenario)}
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </>
                  )}
                  actionButton={
                    <Button onClick={loadScenarios} disabled={scenariosLoading}>
                      <RefreshCw className={`h-4 w-4 mr-2 ${scenariosLoading ? 'animate-spin' : ''}`} />
                      Refresh
                    </Button>
                  }
                />
                
                {showScenarioDialog && selectedScenario && (
                  <ScenarioDialog
                    isOpen={showScenarioDialog}
                    onClose={() => {
                      setShowScenarioDialog(false);
                      setSelectedScenario(null);
                    }}
                    scenario={selectedScenario}
                  />
                )}
              </>
            )}
            
            {!currentSimulator && currentSection === 'guest-submissions' && (
              <>
                <DataTable
                  title="Guest Submissions"
                  description="View and manage guest user submissions from the pricing simulator"
                  headers={['Submission Code', 'Contact Name', 'Company', 'Email', 'Total Price', 'Services', 'Status', 'Date', 'Actions']}
                  items={guestSubmissions}
                  isLoading={guestSubmissionsLoading}
                  getItemKey={(submission) => submission.id}
                  renderRow={(submission: any) => (
                    <>
                      <TableCell className="font-medium">{submission.id}</TableCell>
                      <TableCell>{submission.contactName}</TableCell>
                      <TableCell>{submission.company}</TableCell>
                      <TableCell>{submission.email}</TableCell>
                      <TableCell className="font-medium">{formatPrice(submission.totalPrice)}</TableCell>
                      <TableCell>{submission.services?.length || 0}</TableCell>
                      <TableCell>
                        <Badge variant={submission.status === 'submitted' ? 'default' : 'secondary'}>
                          {submission.status}
                        </Badge>
                      </TableCell>
                      <TableCell>{new Date(submission.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setSelectedGuestSubmission(submission);
                            setShowGuestSubmissionDialog(true);
                          }}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                      </TableCell>
                    </>
                  )}
                  actionButton={
                    <Button onClick={loadGuestSubmissions} disabled={guestSubmissionsLoading}>
                      <RefreshCw className={`h-4 w-4 mr-2 ${guestSubmissionsLoading ? 'animate-spin' : ''}`} />
                      Refresh
                    </Button>
                  }
                />
                
                {showGuestSubmissionDialog && selectedGuestSubmission && (
                  <GuestSubmissionDetailDialog
                    isOpen={showGuestSubmissionDialog}
                    onClose={() => {
                      setShowGuestSubmissionDialog(false);
                      setSelectedGuestSubmission(null);
                    }}
                    submission={selectedGuestSubmission}
                  />
                )}
              </>
            )}
            
            {/* Legacy sections for backward compatibility - removed since we now have simulator-specific sections */}
              <>
                <DataTable
                  title="Client Fields"
                  description="Create and manage form fields for client information and project details"
                  headers={['Name', 'Status', 'Description', 'Fields', 'Actions']}
                  items={configurations}
                  getItemKey={(config) => config.id}
                  onReorder={handleReorderConfigurations}
                  onRowClick={(config) => {
                    setEditingConfig(config);
                    setShowConfigDialog(true);
                  }}
                  searchFields={['name', 'description']}
                  searchPlaceholder="Search configurations..."
                  filterOptions={[
                    {
                      key: 'isActive',
                      label: 'Status',
                      options: [
                        { value: 'true', label: 'Active', count: configurations.filter(c => c.isActive).length },
                        { value: 'false', label: 'Inactive', count: configurations.filter(c => !c.isActive).length }
                      ]
                    }
                  ]}
                  actionButton={
                    <Button 
                      onClick={() => {
                        setEditingConfig(null);
                        setShowConfigDialog(true);
                      }}
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Add Configuration
                    </Button>
                  }
                  emptyStateTitle="No Configurations"
                  emptyStateDescription="Create your first configuration to define client fields that will appear in the simulator."
                  emptyStateIcon={<Settings className="h-12 w-12 text-muted-foreground" />}
                  emptyStateAction={
                    <Button 
                      onClick={() => {
                        setEditingConfig(null);
                        setShowConfigDialog(true);
                      }}
                      variant="outline"
                    >
                      Create Client Fields
                    </Button>
                  }
                  renderRow={(config) => (
                    <>
                      <TableCell>
                        <div className="font-medium">{config.name}</div>
                      </TableCell>
                      <TableCell>
                        <Badge variant={config.isActive ? "default" : "secondary"}>
                          {config.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="text-sm text-muted-foreground max-w-xs truncate">
                          {config.description || 'No description'}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex flex-wrap gap-1 max-w-xs">
                          {config.fields?.slice(0, 3).map((field: any) => (
                            <Badge key={field.id} variant="secondary" className="text-xs">
                              {field.label}
                            </Badge>
                          ))}
                          {config.fields && config.fields.length > 3 && (
                            <Badge variant="secondary" className="text-xs">
                              +{config.fields.length - 3} more
                            </Badge>
                          )}
                          {(!config.fields || config.fields.length === 0) && (
                            <span className="text-xs text-muted-foreground">No fields</span>
                          )}
                        </div>
                      </TableCell>
                      <TableCell onClick={(e) => e.stopPropagation()}>
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => {
                              setEditingConfig(config);
                              setShowConfigDialog(true);
                            }}
                          >
                            <Edit className="h-3 w-3" />
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => handleDuplicateConfiguration(config)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </>
                  )}
                />

                {showConfigDialog && (
                  <ConfigurationDialog
                    isOpen={showConfigDialog}
                    onClose={() => {
                      setShowConfigDialog(false);
                      setEditingConfig(null);
                    }}
                    onSave={handleSaveConfiguration}
                    onDelete={handleDeleteConfiguration}
                    onDuplicate={handleDuplicateConfiguration}
                    configuration={editingConfig}
                    configurations={configurations}
                    isCreating={!editingConfig}
                  />
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
