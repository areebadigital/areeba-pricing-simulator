import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "../ui/dialog";
import { Button } from "../ui/button";
import { Card, CardContent } from "../ui/card";
import { Separator } from "../ui/separator";
import { FileText, Download, CheckCircle2 } from "lucide-react";
import { formatPrice } from "../../utils/formatters";
import { isOneTimeUnit } from "../../utils/unitClassification";
export function ScenarioSummaryDialog({ open, onOpenChange, scenarioId, clientConfig, summary, selectedItems, categories, onDownloadPDF }) {
    const oneTimeItems = selectedItems.filter(item => item.item.category === 'setup' || isOneTimeUnit(item.item.unit));
    const monthlyItems = selectedItems.filter(item => item.item.category !== 'setup' && !isOneTimeUnit(item.item.unit));
    // Group items by category
    const groupedItems = selectedItems.reduce((acc, item) => {
        const category = item.item.category;
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(item);
        return acc;
    }, {});
    const getCategoryName = (categoryId) => {
        const category = categories.find(cat => cat.id === categoryId);
        return category?.name || categoryId;
    };
    return (_jsx(Dialog, { open: open, onOpenChange: onOpenChange, children: _jsxs(DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [_jsxs(DialogHeader, { children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(CheckCircle2, { className: "h-6 w-6 text-green-600" }), _jsx(DialogTitle, { children: "Scenario Saved Successfully!" })] }), _jsx(DialogDescription, { children: "Your pricing scenario has been saved to the database." })] }), _jsxs("div", { className: "space-y-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "pt-4 space-y-2", children: _jsxs("div", { className: "grid grid-cols-2 gap-3 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Scenario ID:" }), _jsx("p", { className: "font-mono text-xs break-all", children: scenarioId })] }), _jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Client Name:" }), _jsx("p", { children: clientConfig.clientName })] }), _jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Project Name:" }), _jsx("p", { children: clientConfig.projectName })] }), _jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Prepared By:" }), _jsx("p", { children: clientConfig.preparedBy })] })] }) }) }), _jsxs("div", { className: "space-y-2", children: [_jsx("h3", { className: "font-medium", children: "Selected Services" }), _jsx(Card, { children: _jsxs(CardContent, { className: "pt-4 space-y-2", children: [Object.keys(groupedItems).length > 0 ? (Object.entries(groupedItems).map(([categoryId, items]) => (_jsxs("div", { className: "flex justify-between items-center text-sm", children: [_jsxs("span", { className: "text-muted-foreground", children: [getCategoryName(categoryId), ":"] }), _jsxs("span", { children: [items.length, " service", items.length !== 1 ? 's' : ''] })] }, categoryId)))) : (_jsx("p", { className: "text-sm text-muted-foreground", children: "No services selected" })), _jsx(Separator, { className: "my-2" }), _jsxs("div", { className: "flex justify-between font-medium", children: [_jsx("span", { children: "Total Services:" }), _jsx("span", { children: selectedItems.length })] })] }) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h3", { className: "font-medium", children: "Cost Summary" }), _jsx(Card, { className: "bg-accent/50", children: _jsxs(CardContent, { className: "pt-4 space-y-3", children: [(summary.oneTimeTotal > 0 || oneTimeItems.length > 0) && (_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: "One-time Total:" }), _jsx("span", { className: "font-medium", children: formatPrice(summary.oneTimeTotal) })] })), (summary.monthlyTotal > 0 || monthlyItems.length > 0) && (_jsxs(_Fragment, { children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: "Monthly Total:" }), _jsx("span", { className: "font-medium", children: formatPrice(summary.monthlyTotal) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: "Yearly Total:" }), _jsx("span", { className: "font-medium", children: formatPrice(summary.yearlyTotal) })] })] })), _jsx(Separator, {}), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "font-medium", children: "Total Project Cost:" }), _jsx("span", { className: "text-xl font-bold text-primary", children: formatPrice(summary.totalProjectCost) })] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "One-time + First year costs" })] }) })] }), _jsx(Card, { className: "border-primary/20 bg-primary/5", children: _jsx(CardContent, { className: "pt-4", children: _jsxs("div", { className: "flex items-start gap-3", children: [_jsx(FileText, { className: "h-5 w-5 text-primary flex-shrink-0 mt-0.5" }), _jsxs("div", { className: "flex-1", children: [_jsx("h4", { className: "font-medium mb-1", children: "Ready to Download" }), _jsx("p", { className: "text-sm text-muted-foreground mb-2", children: "Your scenario has been saved and is now available as a PDF report. The report will be generated with the latest data from the database." }), _jsxs("p", { className: "text-xs text-muted-foreground bg-muted/50 p-2 rounded", children: ["\uD83D\uDCA1 ", _jsx("strong", { children: "Tip:" }), " After downloading the HTML file, open it in your browser and use ", _jsx("strong", { children: "Print to PDF" }), " (Ctrl+P or Cmd+P) to save it as a PDF document."] })] })] }) }) })] }), _jsxs(DialogFooter, { className: "flex flex-col sm:flex-row gap-2", children: [_jsx(Button, { variant: "outline", onClick: () => onOpenChange(false), className: "w-full sm:w-auto", children: "Close" }), _jsxs(Button, { onClick: () => {
                                onDownloadPDF();
                                onOpenChange(false);
                            }, className: "w-full sm:w-auto", children: [_jsx(Download, { className: "h-4 w-4 mr-2" }), "Download PDF"] })] })] }) }));
}
