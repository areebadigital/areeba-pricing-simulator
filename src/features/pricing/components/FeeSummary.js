import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { Card, CardContent } from '../../../shared/components/ui/card';
import { Separator } from '../../../shared/components/ui/separator';
import { Label } from '../../../shared/components/ui/label';
import { Button } from '../../../shared/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../../shared/components/ui/select';
import { NumberInput } from '../../../components/NumberInput';
import { formatPrice } from '../../../utils/formatters';
import { usePricingCalculation } from '../hooks/usePricingCalculation';
import { DISCOUNT_TYPES, DISCOUNT_APPLICATIONS } from '../constants';
import { Save, ChevronDown, ChevronUp } from 'lucide-react';
import { Collapsible, CollapsibleTrigger } from '../../../shared/components/ui/collapsible';
export function FeeSummary({ selectedItems, categories, clientConfig, onSubmit, isSubmitting = false, isGuestMode = false, guestContactSubmitted = false, onShowGuestContactForm }) {
    const [showDiscountDetails, setShowDiscountDetails] = useState(false);
    const { summary, globalDiscount, globalDiscountType, globalDiscountApplication, updateGlobalDiscount, updateGlobalDiscountType, updateGlobalDiscountApplication, } = usePricingCalculation(selectedItems);
    const handleSubmit = async () => {
        if (onSubmit) {
            await onSubmit();
        }
    };
    const handleShowGuestContactForm = () => {
        if (onShowGuestContactForm) {
            onShowGuestContactForm();
        }
    };
    return (_jsx(Card, { className: "w-full", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx(Label, { className: "text-sm font-medium", children: "Global Discount" }), _jsx(Collapsible, { open: showDiscountDetails, onOpenChange: setShowDiscountDetails, children: _jsx(CollapsibleTrigger, { asChild: true, children: _jsx(Button, { variant: "ghost", size: "sm", className: "h-8 px-2", children: showDiscountDetails ? (_jsx(ChevronUp, { className: "h-4 w-4" })) : (_jsx(ChevronDown, { className: "h-4 w-4" })) }) }) })] }), _jsxs("div", { className: "grid grid-cols-3 gap-3", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "discount-amount", className: "text-xs", children: "Amount" }), _jsx(NumberInput, { id: "discount-amount", value: globalDiscount, onChange: (value) => updateGlobalDiscount(value), placeholder: "0", className: "h-8" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "discount-type", className: "text-xs", children: "Type" }), _jsxs(Select, { value: globalDiscountType, onValueChange: updateGlobalDiscountType, children: [_jsx(SelectTrigger, { className: "h-8", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: DISCOUNT_TYPES.PERCENTAGE, children: "%" }), _jsx(SelectItem, { value: DISCOUNT_TYPES.FIXED, children: "$" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "discount-application", className: "text-xs", children: "Apply To" }), _jsxs(Select, { value: globalDiscountApplication, onValueChange: updateGlobalDiscountApplication, children: [_jsx(SelectTrigger, { className: "h-8", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: DISCOUNT_APPLICATIONS.NONE, children: "None" }), _jsx(SelectItem, { value: DISCOUNT_APPLICATIONS.BOTH, children: "Both" }), _jsx(SelectItem, { value: DISCOUNT_APPLICATIONS.MONTHLY, children: "Monthly Only" }), _jsx(SelectItem, { value: DISCOUNT_APPLICATIONS.ONETIME, children: "One-time Only" })] })] })] })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium", children: "One-time Costs" }), _jsx("span", { className: "text-sm font-mono", children: formatPrice(summary.oneTimeTotal) })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium", children: "Monthly Costs" }), _jsx("span", { className: "text-sm font-mono", children: formatPrice(summary.monthlyTotal) })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium", children: "Yearly Costs" }), _jsx("span", { className: "text-sm font-mono", children: formatPrice(summary.yearlyTotal) })] }), _jsx(Separator, {}), _jsxs("div", { className: "flex justify-between items-center text-lg font-semibold", children: [_jsx("span", { children: "Total Project Cost (Year 1)" }), _jsx("span", { className: "font-mono", children: formatPrice(summary.totalProjectCost) })] }), summary.savings.totalSavings > 0 && (_jsx("div", { className: "bg-green-50 border border-green-200 rounded-lg p-3", children: _jsxs("div", { className: "flex justify-between items-center text-green-800", children: [_jsx("span", { className: "text-sm font-medium", children: "Total Savings" }), _jsxs("span", { className: "text-sm font-mono font-semibold", children: [formatPrice(summary.savings.totalSavings), " (", summary.savings.savingsRate.toFixed(1), "%)"] })] }) }))] }), _jsx("div", { className: "flex gap-3 pt-4", children: isGuestMode && !guestContactSubmitted ? (_jsx(Button, { onClick: handleShowGuestContactForm, className: "flex-1", size: "lg", children: "Get Quote" })) : (_jsx(Button, { onClick: handleSubmit, disabled: isSubmitting, className: "flex-1", size: "lg", children: isSubmitting ? (_jsxs(_Fragment, { children: [_jsx(Save, { className: "mr-2 h-4 w-4 animate-spin" }), "Submitting..."] })) : ('Submit Quote') })) })] }) }) }));
}
